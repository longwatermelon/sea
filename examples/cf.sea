let buffer:int = 0;

fn read_char() -> int {
    syscall(0,0,&buffer,1);
    return buffer;
}

fn print_char(c:int) -> void {
    buffer=c;
    syscall(1,1,&buffer,1);
}

fn read_int() -> int {
    let ch:int = read_char();
    let res:int = 0;
    while (ch!=10 && ch!=32) {
        res = res*10 + ch-48;
        ch = read_char();
    }
    return res;
}

fn print_int(x:int) -> void {
    if (x==0) {
        print_char(48);
        return 0;
    }

    let arr:int = stalloc(20,int);
    let ind:int=0;
    while (x!=0) {
        let rem:int = x%10;
        x = x/10;
        *(arr+ind*sizeof(int))=rem+48;
        ind = ind+1;
    }

    while (ind!=0) {
        ind = ind-1;
        print_char(*(arr + ind*sizeof(int)));
    }
}

let n:int;
let k:int;
let a:int = galloc(101,int);

fn solve() -> void {
    let i:int=1;
    while (i!=n && k!=0) {
        while (k!=0 && *(a + i*sizeof(int))!=0) {
            *(a + i*sizeof(int)) = *(a + i*sizeof(int))-1;
            *(a + n*sizeof(int)) = *(a + n*sizeof(int))+1;
            k = k-1;
        }
        i = i+1;
    }

    i=1;
    while (i!=n) {
        print_int(*(a + i*sizeof(int)));
        print_char(32);
        i=i+1;
    }
    print_int(*(a + n*sizeof(int)));
    print_char(10);
}

fn main() -> int {
    let t:int = read_int();
    while (t!=0) {
        t=t-1;
        n=read_int();
        k=read_int();

        let ind:int=1;
        while (ind!=n) {
            *(a + ind*sizeof(int)) = read_int();
            ind = ind+1;
        }
        *(a + ind*sizeof(int)) = read_int();

        solve();
    }
}
